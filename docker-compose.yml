version: '3'

services:
  reverse-proxy:
    container_name: 'traefik'
    image: traefik:v2.6
    command: 
      - "--providers.docker.exposedbydefault=false"
      - "--api.insecure=true" 
      - "--providers.docker"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  postgres:
    container_name: 'postgres'
    image: postgis/postgis
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    volumes:
      - ./general/postgres-initdb:/docker-entrypoint-initdb.d/

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 10
    ports:
        - 5672:5672
        - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-password}

  rider-service:
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    container_name: "rider-service"
    image: ghcr.io/s6-bikepack/rider-service:main
    environment:
      DATABASE: ${RIDER_DATABASE:-postgresql://user:password@postgres:5432/rider}
      RABBITMQ: ${RABBITMQ:-amqp://user:password@rabbitmq:5672/}
      TRACING_URL: ${TRACING_URL:-jaeger}
      TRACING_PORT: ${TRACING_PORT:-6831}

  customer-service:
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    container_name: "customer-service"
    image: ghcr.io/s6-bikepack/customer-service:main
    environment:
      DATABASE: ${CUSTOMER_DATABASE:-postgresql://user:password@postgres:5432/customer}
      RABBITMQ: ${RABBITMQ:-amqp://user:password@rabbitmq:5672/}

  authentication-service:
    container_name: "authentication-service"
    image: ghcr.io/s6-bikepack/authentication-service:main
    volumes:
      - ./serviceKey.json:/serviceKey.json

  user-service:
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      DATABASE: ${USER_DATABASE:-postgresql://user:password@postgres:5432/user}
      RABBITMQ: ${RABBITMQ:-amqp://user:password@rabbitmq:5672/}
    container_name: "user-service"
    image: ghcr.io/s6-bikepack/user-service:main

  service-area-service:
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./general/service-area.config.json:/config/config.json
    environment:
      config: ./config/config
    container_name: "service-area-service"
    image: ghcr.io/s6-bikepack/service-area-service:main

  front-end:
    container_name: "bikepack-frontend"
    image: ghcr.io/s6-bikepack/bikepack-frontend:main
    labels:
      - traefik.enable=true
      - traefik.http.routers.front-end.rule=Host(`client.localhost`)
      - traefik.http.routers.front-end.entrypoints=web
    ports:
      - 3001:80

  jaeger:
    container_name: "jaeger"
    image: "jaegertracing/all-in-one:latest"
    ports:
      - "16686:16686"
      - "6831:6831"

networks:
  default:
    external:
      name: bikepack